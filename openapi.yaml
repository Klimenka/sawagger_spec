openapi: 3.0.0
info:
  title: Banking API
  description: Banking api
  contact:
    email: example@email.com
  version: 1.0.0
servers:
- url: http://banking-application-api.herokuapp.com
  description: This the is a simple REST API banking application
paths:
  /users:
    get:
      tags:
      - users
      summary: get all users
      description: getting all users (employees and customers) by Employee
      operationId: getUsers
      parameters:
      - name: userType
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - Customer
          - Employee
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                  - $ref: '#/components/schemas/Customer'
                  - $ref: '#/components/schemas/Employee'
        401:
          description: Unauthorized
        404:
          description: The specified resource was not found
      security:
      - api_key: []
    post:
      tags:
      - users
      summary: Adds a new user
      description: Adds a new user and returns Login object. If it is a customer then
        a new bank account is created as well.
      operationId: addUser
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - $ref: '#/components/schemas/Customer'
              - $ref: '#/components/schemas/Employee'
        required: true
      responses:
        201:
          description: the user has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
        400:
          description: Bad request.
        401:
          description: Unauthorized
      security:
      - api_key: []
  /users/{userId}:
    get:
      tags:
      - users
      summary: Gets a user by user ID
      description: Gets a user by user ID
      operationId: getUserById
      parameters:
      - name: userId
        in: path
        description: The id of the user to return
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int64
      responses:
        200:
          description: a user object
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/Customer'
                - $ref: '#/components/schemas/Employee'
    delete:
      tags:
      - users
      summary: Delete a user by user ID
      operationId: deleteUserById
      parameters:
      - name: userId
        in: path
        description: The id of the user to return
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int64
      responses:
        204:
          description: No content
        400:
          description: Bad request.
        401:
          description: Unauthorized
      security:
      - api_key: []
  /users/login:
    post:
      tags:
      - users
      summary: Returns an auth token
      operationId: createUserToken
      requestBody:
        description: Logs a user in and return an auth token, if the specified username
          and password are correct.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      responses:
        200:
          description: Token send
        400:
          description: Bad request.
        404:
          description: The specified resource was not found
  /users/{userId}/updatePassword:
    put:
      tags:
      - users
      summary: update the user's login info
      description: calling this will allow the user to change his/her password
      operationId: updateUserLogin
      parameters:
      - name: userId
        in: path
        description: The id of the user to return
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      responses:
        201:
          description: user password has successfully been updated
        400:
          description: Bad request.
        404:
          description: The specified resource was not found
  /accounts:
    get:
      tags:
      - accounts
      summary: get all bank accounts
      description: Calling this will allow Employees to check data of all accounts
        or filter them by the date of opening or based on the type of bank account
        [saving or current]
      operationId: getBankAccounts
      parameters:
      - name: dateOfOpening
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date
      - name: accountType
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - current
          - saving
      responses:
        200:
          description: the accounts data
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                  - $ref: '#/components/schemas/CurrentAccount'
                  - $ref: '#/components/schemas/SavingAccount'
        400:
          description: Bad request.
        401:
          description: Unauthorized
        404:
          description: The specified resource was not found
      security:
      - api_key: []
    post:
      tags:
      - accounts
      summary: create a bank account
      description: Calling this will allow employees to open an account for a specific
        customer
      operationId: createBankAccount
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - $ref: '#/components/schemas/CurrentAccount'
              - $ref: '#/components/schemas/SavingAccount'
        required: true
      responses:
        201:
          description: the account has been created
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/CurrentAccount'
                - $ref: '#/components/schemas/SavingAccount'
        400:
          description: Bad request.
        401:
          description: Unauthorized
      security:
      - api_key: []
  /accounts/{userId}:
    get:
      tags:
      - accounts
      summary: get bank accounts of a specific user
      description: Calling this will allow both customer and employee to check data
        of a specific account userId and filter them by bank account type
      operationId: getBankAccount
      parameters:
      - name: userId
        in: path
        description: The id of the user to return
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int64
      - name: accountType
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - current
          - saving
      responses:
        200:
          description: the account data
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                  - $ref: '#/components/schemas/CurrentAccount'
                  - $ref: '#/components/schemas/SavingAccount'
        400:
          description: Bad request.
        404:
          description: The specified resource was not found
  /accounts/{accountNumber}:
    delete:
      tags:
      - accounts
      summary: close a bank account
      description: Calling this will allow an employee to close a specific bank account
      operationId: closeBankAccount
      parameters:
      - name: accountNumber
        in: path
        description: the account number
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        204:
          description: the bank account has successfully been closed
        400:
          description: Bad request.
        401:
          description: Unauthorized
        404:
          description: The specified resource was not found
      security:
      - api_key: []
  /transactions:
    get:
      tags:
      - transactions
      summary: retrieves all transactions which has been made from a user's account.
      description: This function will retrieve the transaction activities of one account.
        The user will have the option to filter the transaction activities by using
        dates.
      operationId: getTransactionHistory
      parameters:
      - name: accountNumber
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: dateFrom
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date
      - name: dateTo
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date
      responses:
        200:
          description: Transaction history has successfully been retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        400:
          description: Bad request.
    post:
      tags:
      - transactions
      summary: transfer/withdraw/deposit money
      description: Calling this will allow a user/employee to transfer/withdraw/deposit
        money
      operationId: createTransaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
            encoding:
              Transaction:
                style: form
                explode: true
      responses:
        201:
          description: Transaction has successfully been send.
        400:
          description: Bad request.
        403:
          description: Insufficient balance.
  /getTransaction:
    get:
      tags:
      - transactions
      summary: retrieves one transaction from the user
      description: This function will retrieve the transaction activities of one account
        by using the transaction Id.
      operationId: getTransaction
      parameters:
      - name: transactionId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
      responses:
        200:
          description: Transaction has successfully been retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        400:
          description: Bad request.
components:
  schemas:
    User:
      required:
      - commercialMessages
      - dateOfBirth
      - emailAddress
      - id
      - mobileNumber
      - officialName
      - primaryAddress
      type: object
      properties:
        id:
          type: integer
        officialName:
          type: string
        preferredName:
          type: string
        sex:
          type: string
          enum:
          - male
          - female
        dateOfBirth:
          type: string
        primaryAddress:
          $ref: '#/components/schemas/Address'
        postAddress:
          $ref: '#/components/schemas/Address'
        mobileNumber:
          type: string
        emailAddress:
          type: string
        commercialMessages:
          type: string
          enum:
          - by post
          - by bankmail
          - by telephone
          - by email
        preferredLanguage:
          type: string
          enum:
          - Dutch
          - English
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
    Customer:
      allOf:
      - $ref: '#/components/schemas/User'
    Employee:
      properties:
        jobPosition:
          type: string
      allOf:
      - $ref: '#/components/schemas/User'
    Address:
      type: object
      properties:
        street:
          type: string
        houseNumber:
          type: integer
        postCode:
          type: string
        city:
          type: string
        country:
          type: string
    Role:
      type: object
      properties:
        roleId:
          type: integer
        role:
          type: string
    Account:
      required:
      - accountType
      - dateOfOpening
      - userId
      type: object
      properties:
        accountNumber:
          type: integer
          format: int64
        iban:
          type: string
        balance:
          type: number
          format: float
        dateOfOpening:
          type: string
        userIdentification:
          type: integer
          format: int64
        user:
          allOf:
          - $ref: '#/components/schemas/User'
        currency:
          type: string
        accountType:
          type: string
          enum:
          - current
          - saving
        accountStatus:
          type: string
          default: opened
          enum:
          - opened
          - closed
    CurrentAccount:
      allOf:
      - $ref: '#/components/schemas/Account'
    SavingAccount:
      properties:
        interestRate:
          type: number
          format: float
      allOf:
      - $ref: '#/components/schemas/Account'
    Login:
      required:
      - password
      - userName
      type: object
      properties:
        userName:
          type: string
        password:
          type: string
        user:
          allOf:
          - $ref: '#/components/schemas/User'
    Transaction:
      required:
      - amount
      - date
      - transactionType
      - transaction_id
      - userPerforming
      type: object
      properties:
        transaction_id:
          type: integer
        accountFrom:
          type: string
        accountTo:
          type: string
        amount:
          maximum: 10000
          minimum: 1
          type: number
          format: float
        userPerforming:
          allOf:
          - $ref: '#/components/schemas/User'
        date:
          type: string
          format: date
        transactionStatus:
          type: string
          default: pending
          enum:
          - pending
          - successful
          - failed
        transactionType:
          type: string
          enum:
          - transaction
          - withdraw
          - deposit
  responses:
    NotFound:
      description: The specified resource was not found
    Unauthorized:
      description: Unauthorized
    BadRequest:
      description: Bad request.
  parameters:
    userId:
      name: userId
      in: path
      description: The id of the user to return
      required: true
      style: simple
      explode: false
      schema:
        minimum: 1
        type: integer
        format: int64
  securitySchemes:
    api_key:
      type: apiKey
      name: x-authtoken
      in: header
